# For more information on how to use this pipeline please refer to:
# http://tardis-sn.github.io/tardis/development/continuous_integration.html

trigger: none
pr: [ master ]

schedules:
  - cron: '0 0 1 * *'
    displayName: 'Monthly test'
    branches:
      include:
        - master

variables:
  system.debug: false
  artifact.url: 'https://dev.azure.com/tardis-sn/TARDIS/_apis/build/builds/$(Build.BuildId)/artifacts\?artifactName\=report\&api-version\=4.1'

jobs:
  - job: 'report'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - template: templates/default.yml
        parameters:
          fetchRefdata: false  # See the comment below
          useMamba: true

      #  Situation:
      #
      #     requirement 1: Azure Repos requires token auth for public repositories containing LFS objects (bug).
      #     requirement 2: GitHubComment task requires secret sharing enabled to work.
      #
      #  If secret sharing is enabled, the token needed to fetch Azure Repos is not shared for security reasons,
      #  breaking the pipeline.
      #
      #  Solution: Use the GitHub repository until a fix for Azure Repos bug arrives.

      - bash: |
          source activate tardis
          $(package.manager) install bokeh --channel conda-forge --no-update-deps --yes
        displayName: 'Install Bokeh'

      - bash: |
          GIT_LFS_SKIP_SMUDGE=1 git clone https://github.com/tardis-sn/tardis-refdata.git $(refdata.dir)
          cd $(refdata.dir)
          git lfs pull --include="atom_data/kurucz_cd23_chianti_H_He.h5"
          git lfs pull --include="atom_data/chianti_He.h5"
          git lfs pull --include="unit_test_data.h5"
          git lfs pull --include="packet_unittest.h5"
          git lfs pull --include="montecarlo_1e5_compare_data.h5"
          git lfs pull --include="montecarlo_one_packet_compare_data.h5"
        displayName: 'Fetch reference data repository'
        condition: false

      - bash: |
          cd $(refdata.dir)
          git remote add upstream https://github.com/tardis-sn/tardis-refdata.git
          git fetch upstream
          git fetch upstream "+refs/pull/*/head:refs/remotes/upstream/pr/*"
        displayName: 'Set upstream remote'
        condition: false

      - bash: |
          cd $(tardis.dir)
          source activate tardis
          pytest tardis --tardis-refdata=$(refdata.dir) --generate-reference
        displayName: 'Generate reference data'
        condition: false

      - bash: |
          cd $(refdata.dir)/notebooks
          source activate tardis
          jupyter nbconvert ref_data_compare.ipynb --to html --execute --ExecutePreprocessor.timeout=6000
        displayName: 'Render notebook'

      - bash: |
          cd $(refdata.dir)/notebooks
          source activate tardis
          jupyter nbconvert ref_data_compare.ipynb --to html --execute --allow-errors --ExecutePreprocessor.timeout=6000
        displayName: 'Render notebook (allow errors)'
        condition: failed()

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(refdata.dir)/notebooks/ref_data_compare.html'
          artifactName: 'report'
        displayName: 'Upload artifact'
        condition: succeededOrFailed()


      # The following steps should run only if the pipeline is triggered from a pull request.

      - bash: |
          DOWNLOAD_URL="$(curl -s $ARTIFACT_URL | jq '.resource | .downloadUrl')"
          FILENAME_URL=$(echo $DOWNLOAD_URL | sed 's/zip/file\&subPath=\%2Fref_data_compare.html/g') 
          echo "##vso[task.setvariable variable=filename.url]$FILENAME_URL"
        displayName: 'Get download URL'
        condition: and(succeededOrFailed(), eq('$(Build.Reason)', 'PullRequest'))

      - task: GitHubComment@0
        inputs:
          gitHubConnection: 'tardis-sn'
          repositoryName: 'tardis-sn/tardis'
          id: $(System.PullRequest.PullRequestNumber)
          comment: 'Build succeeded: [Download report]($(filename.url))'
        displayName: 'Post results'
        condition: eq('$(Build.Reason)', 'PullRequest')

      - task: GitHubComment@0
        inputs:
          gitHubConnection: 'tardis-sn'
          repositoryName: 'tardis-sn/tardis'
          id: $(System.PullRequest.PullRequestNumber)
          comment: 'Build failed: [Download report]($(filename.url))'
        displayName: 'Post results'
        condition: and(failed(), eq('$(Build.Reason)', 'PullRequest'))
